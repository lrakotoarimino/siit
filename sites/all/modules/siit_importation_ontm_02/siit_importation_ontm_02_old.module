 <?php

/*include_once drupal_get_path('module', 'libraries') . '/PHPExcel.php';
include_once drupal_get_path('module', 'libraries') . '/PHPExcel/IOFactory.php';*/

ini_set('xdebug.var_display_max_depth', -1);
ini_set('xdebug.var_display_max_children', -1);
ini_set('xdebug.var_display_max_data', -1);

header('Content-Type: text/html; charset=utf-8');

/**
* @file
* Display a Adema Importation formulaire
*/

function siit_importation_ontm_02_old_menu(){
    $items = array();
    $items['siit_importation_ontm_02_old'] = array(
        'title'            => t('IMPORTATION DES VIGNETTES TOURISTIQUES (ONTM)'), 
        'page callback'    => 'drupal_get_form',
        'page arguments' => array('siit_importation_ontm_02_old_form'),
        'access arguments' => array('access siit_importation_ontm_02_old'),
        'type'             => MENU_LOCAL_TASK,
    		//'access callback' => TRUE,
    );
    
    return $items;
    
}  

function siit_importation_ontm_02_old_permission() {
  return array( 
    'access siit_importation_ontm_02_old' => array(
      'title' => t('siit_importation_ontm_02_old : Ontm formulaire'),
      'description' => t('Perform administration tasks for ontm.'),
    ),
  );
}

function siit_importation_ontm_02_old_form($form, &$form_state) {
	
	drupal_set_title(t('IMPORTATION DES VIGNETTES TOURISTIQUES (ONTM)'));
	
	 if(!isset($form_state['storage']['confirm'])){			 
	        return get_siit_importation_ontm_02_old_form($form, $form_state);
	    }
        else{
            list($id_importation,$question) = searchDataExist(ENTITE_ONTM02, $_POST['annee'], $_POST['mois'], STATUT_AVALIDER, false);
			
			if($id_importation){
                  $path = 'siit_importation_ontm_02_old';
                  $description = '';
                  $yes = 'Oui';
                  $no = 'Non';
                  $form = confirm_form($form, $question, $path, $description, $yes, $no);
                  $form['annee'] = array('#type' => 'hidden', '#value' => $_POST['annee']);
				  $form['mois'] = array('#type' => 'hidden', '#value' => $_POST['mois']);
                  $form['csv_file'] = array('#type' => 'hidden', '#value' => $_POST['csv_file']);
                  $form['chemin'] = array('#type' => 'hidden', '#value' => $form_state['storage']['uri']);
                  $form['actions']['submit'] = array(
                    '#type' => 'submit',
                    '#value' => $yes,
                    '#attributes' => array('class' => array('button button--primary js-form-submit form-submit btn-success btn'),),
            	    '#submit' => array('csv_import_ontm_02_old_submit'),
                  );  
                  $form['#attached']['css'] = array(
                      drupal_get_path('module', 'siit_importation_ontm_02_old') . '/css/ontm.css'
                  );
                  return $form;
            }
            else csv_import_ontm_02_old_submit($form, $form_state);
        }
	
}

function get_siit_importation_ontm_02_old_form($form, $form_state){

	$form['annee'] = array(
	    "#type" => "select",      
	    "#title" => t("Année :"),
	    "#options" => optionYear(),
	    "#required" => TRUE,
		);
	
	$form["mois"] = array(
	    "#type" => "select",      
	    "#title" => t("Mois :"),
	    "#options" => optionMonth(false),
	    "#required" => TRUE,
	    );	
	
   $form['importation']['csv_file'] = array(
	        '#title' => 'Importer Fichier :', // Titre dans la page d'importation du fichier
	        '#description' => 'Seuls ces fichiers csv, xlsx sont valides.',
	        '#type' => 'managed_file',
	        '#required' => TRUE,
	        '#upload_validators' => array(
	            'file_validate_extensions' => array('xlsx csv'),
	        ),
	    );
	    
	 $form['importation']['submit'] = array(
	        '#type' => 'submit',
	        '#value' => t('Process'),
	        '#attributes' => array('class' => array('button button--primary js-form-submit form-submit btn-success btn'),),
			//'#validate' => array('csv_import_ontm_02_old_validate'),
	    	'#submit' => array('csv_import_ontm_02_old_submit'),
	 );
	    
	    
	 $form['importation']['back'] = array('#type' => 'submit', '#value' => t('Back'));
   	 $form['importation']['back']['#submit'] = array('siit_back_ontm02_submit');
	 $form['importation']['back']['#limit_validation_errors'] = array();
	 $form['importation']['back']['#name'] = 'back';
	 $form['#attributes']['class'][] = 'import-form';
	
	$form['#attributes']['class'][] = 'import-form';
	return $form;
	
}



function siit_back_ontm02_submit($form, &$form_state)  {
	$form_state['redirect'] = array(
		'siit_importation_liste',
		array(),
		302,
  );
}


function csv_import_ontm_02_old_submit($form, &$form_state){

	if(!isset($form_state['storage']['confirm'])) {
			
        list($id_importation,$question) = searchDataExist(ENTITE_ONTM02, $_POST['annee'], $_POST['mois'], STATUT_VALIDE, true) ;
		
        if($id_importation){
            $form_state['storage']['confirm'] = TRUE;
            $form_state['rebuild'] = TRUE;
            $form_state['storage']['csv_file'] = $form_state['values']['csv_file'];
            $file = file_load($form_state['values']['csv_file']);
            $form_state['storage']['uri'] = $file->uri;
        } else {
            $file = file_load($form_state['values']['csv_file']);
            traitement_ontm02($file->uri,$form_state);
        }
    } else {
        if(isset($_POST["chemin"])) $chemin = $_POST["chemin"];
        else{
            $file = file_load($form_state['values']['csv_file']);
            $chemin = $file->uri;
        }
        traitement_ontm02($chemin,$form_state);
    }

} //fin function





function traitement_ontm02($chemin, &$form_state)
{

	// Récupération du fichier  
	if($form_state['values']['csv_file']){
				
			
	$valid = true;
	
	$annee_form  = $form_state['values']['annee'];
	$id_mois_form = $form_state['values']['mois'];

    $handle = fopen(drupal_realpath($chemin), 'r') or die(t('Unable to open the temp file.'));
    $i = 0;
    $error = false;
    
    $firstData = fgetcsv($handle, 0, ';');
    //  drupal_set_message(t("count(firstData)".count($firstData)), $type = '', $repeat = FALSE);
    if (count($firstData) == 11  || count($firstData) == 10  || count($firstData) == 14 || count($firstData) == 7 || count($firstData) == 9) {
    	$delimiterLine = ";";
    } else {
	    	$handle = fopen(drupal_realpath($chemin), 'r') or die(t('Unable to open the temp file.'));
	    	//$firstData = fgetcsv($handle, 0, ',', '"');
	    	$firstData = fgetcsv($handle, 0, ',');
	    	
	    	//drupal_set_message(t("count(firstData)".count($firstData)), $type = '', $repeat = FALSE);
	    	if (count($firstData) == 11  || count($firstData) == 10  || count($firstData) == 14 || count($firstData) == 7 || count($firstData) == 9) {
	    		$delimiterLine = ",";
			} else {
			 	//Pour la première ligne, on vérifie que l'en-tête est incorrecte
			 	drupal_set_message(t("Fichier non conforme."), $type = 'error', $repeat = FALSE);
				$valid=false;
				return;
			}
    }
    
	
	//Test deja validé
	$user = db_query("select * from siit_importation imp,siit_type_fichier t where t.id_type_fichier=imp.id_type_fichier and annee=".$_POST['annee']." and id_mois =".$_POST['mois'].
							" and id_statut=2 and li_type_fichier = '".ENTITE_ONTM02."'" );
    $id_importation = 0;
    foreach($user as $u) {
       	$id_importation = $u->id_importation;
    }
    if($id_importation){
        form_set_error('edit-valide', t("Un import a été déjà validé pour la période ".get_lib_mois($_POST['mois'])." ".$_POST['annee']."."));
		$valid=false;
		return;
    } 	
	
	if(count($firstData) == 7 || count($firstData) == 9){
		$data = cas_fichier_2($handle , $delimiterLine, $valid);
	}else {
		$data = cas_fichier_1($handle , $delimiterLine, $valid);
	}
	
	
    
	//UPDATE AND SAVE	 
	if(!$valid){
		header("Refresh:0");
	}
	else{
		
			//Sortir de la boucle si toute la ligne est vide
			$i = 0;
			foreach($data as $key=>$val){
				if($val == ""){
					$i = $i + 1;
				}
			}
						
			if($i == sizeof($data)){
				drupal_set_message(t("Aucune donnée correspondante à l'année '$annee_form' 
										ou le mois de '".get_lib_mois($id_mois_form)."' saisi dans le fichier."), $type = 'error', $repeat = true);	
				return;
			}
			
			//INSERTION siit_importation		
			// rechecher importation avec dt_import et li_fichier et id_type_fichier
			$data_import = array();
			$data_import['annee'] = $annee_form;
			$data_import['id_mois'] = $id_mois_form;
			$data_import["li_fichier"] = basename($chemin);
			$data_import["id_statut"] = STATUT_AVALIDER;
			$data_import["id_type_fichier"] = TYPE_FICHIER_ONTM02;

			//On supprime l'importation existante pour l'équivalent
			controleDoublonImportation($annee_form, $id_mois_form, ENTITE_ONTM02, $data_import["li_fichier"]); //NON PAS POUR PAF01
			$id_importation = insert_importation($data_import);
			
			// INSERTION import_data_ontm_02_old
			$id_etab=0;						
			foreach ($data as $value) {					
						
					if($value["li_etablissement"]!="" && $value["id_etablissement"]==0 ){
						//insert 			
						$id_etab = import_data_etablissement_ontm_02_old($value,$id_importation);
						import_data_ontm_02_old($value,$id_importation,$id_etab);
					}
					else{
						//update 
						import_data_ontm_02_old($value,$id_importation,0);
					}		 
			}
			
			drupal_set_message("L'import a été effectué avec succès.", $type = 'status');
			$form_state['redirect'] ="siit_importation_fusion_etablissement";
	}

}



//Cas fichier 1 avec entete Simulation Recettes Vignettes
 /*
	0 ..
	1 ..
	2 REGION
	3 CAT;
	4 NBRE CH;
	5 VT;
	6 NOM DE L ETABLISSEMENT;
	7 MOIS;
	8 Montant;
	9 VT part ONTM 50%;
	10 Taux d'occupation;
	11 ..
	12 ..
	13 ..
	14 ..	
 */
 
function cas_fichier_1($handle , $delimiterLine, &$valid){
	
	$data = array();
    $i=1;$mois;
	$str_final="";
	$li_etablissement="";
	$id_etablissement=0;
    
   
    //if (!$error) {
		while(($line = fgetcsv($handle, 0, $delimiterLine, '"')) !== FALSE) {
		        $id_mois_min=0; $id_mois_max=0; $annee_min=0;$annee_max=0;
				$annee_min_actif =false;$is_montant_set=false;	$annee_tmp=0;	
				$max_au = false;$max_et= false;

				$i++;
				
				if(isset($line[2]) && ( $i<4 || strpos($line[2], 'Moyenne') !== false )) continue;
				//if($i==5000) break;
				
				if(isset($line[7]) && $line[7]=="TOTAL") break;
				if(isset($line[7]) && $line[7]!== "" ){
					
					//drupal_set_message(t("Champs mois".$line[7]), $type = '', $repeat = true);
					//cas 2 JANVIER AU FEVRIER 2016
					if(strpos(strtolower($line[7]), strtolower('AU')) !== false || strpos(strtolower($line[7]), strtolower(' A '))){
						//drupal_set_message(t("Cas 2".$line[7]), $type = '', $repeat = true);
						//cas 3 DECEMBRE x AU FEVRIER 2016
						$j=0;
						$step_2 = false;
						$step_3 = false;
						
						//ici cas 2 JANVIER A FEVRIER 2016
						if(strpos(strtolower($line[7]), strtolower(' A '))){
							$str_date2 = multiexplode(array(" ",strtolower(' A ')),strtolower($line[7]));	
							foreach($str_date2 as $str){
							
									if($j==0){
										$id_mois = get_id_mois(trim($str));
										if($id_mois == 0){
											drupal_set_message(t("La colonne 'Mois' contient une erreur : vérifier le mois du début '$str' de l'intervalle. (".real_line($i).")"), $type = 'error', $repeat = true);
											$valid = false;
										}else if($id_mois > 0){	
											$id_mois_min = $id_mois;
										}
									}

									if($j==1){
										if(!empty($str)){
											if(!is_numeric($str)){
												
												$id_mois = get_id_mois(trim($str));
												if($id_mois == 0){
													drupal_set_message(t("La colonne 'Mois' contient une erreur : vérifier le mois ou l'année de fin '$str' de l'intervalle. (".real_line($i).")"), $type = 'error', $repeat = true);											
													$valid = false;
												}else {
													$id_mois_max = $id_mois;													
												}
											}else {
												$annee_min = $str;
												$step_2 = true;
											}
										}
									}															
									
									if($step_2 == true){
										if($j==2){
											if(!empty($str)){
												$id_mois = get_id_mois(trim($str));
												if($id_mois == 0){
													drupal_set_message(t("La colonne 'Mois' contient une erreur : vérifier le mois de fin '$str' de l'intervalle. (".real_line($i).")"), $type = 'error', $repeat = true);												
													$valid = false;
												}else if($id_mois>0){
													$id_mois_max = $id_mois;
												}
											}
										}
										if($j==3){
											if(!is_numeric($str)){
												drupal_set_message(t("La colonne 'Mois' contient une erreur : vérifier l'année de fin '$str' de l'intervalle. (".real_line($i).")"), $type = 'error', $repeat = true);
												$valid = false;
											}else {
												$annee_max = $str;
											}	
										}
									}else {
										if($j==2){
											if(!empty($str)){
												if(!is_numeric($str)){
													drupal_set_message(t("La colonne 'Mois' contient une erreur : vérifier l'année de fin '$str' de l'intervalle. (".real_line($i).")"), $type = 'error', $repeat = true);
													$valid = false;
												}else {
													$annee_max = $str;
													$annee_min = $annee_max;
												}		
											}
										}
									}
									$j++;
							}	
						}else if(strpos(strtolower($line[7]), strtolower('AU')) !== false) {
							$str_date2 = multiexplode(array(" ",strtolower("AU")),strtolower($line[7]));	
							foreach($str_date2 as $str){
							
									if($j==0){
										$id_mois = get_id_mois(trim($str));
										if($id_mois == 0){
											drupal_set_message(t("La colonne 'Mois' contient une erreur : vérifier le mois du début '$str' de l'intervalle. (".real_line($i).")"), $type = 'error', $repeat = true);
											$valid = false;
										}else if($id_mois > 0){	
											$id_mois_min = $id_mois;
										}
									}

									if($j==1){
										if(!empty($str)){
											if(!is_numeric($str)){
												drupal_set_message(t("La colonne 'Mois' contient une erreur : vérifier l'année du début '$str' de l'intervalle. (".real_line($i).")"), $type = 'error', $repeat = true);
												$valid = false;
											}else {
												$annee_min = $str;
											}
										}
									}
									
									if($j==3){
										if(!empty($str)){
											$id_mois = get_id_mois(trim($str));
											if($id_mois == 0){
												drupal_set_message(t("La colonne 'Mois' contient une erreur : vérifier le mois de fin '$str' de l'intervalle. (".real_line($i).")"), $type = 'error', $repeat = true);											
												$valid = false;
											}else if($id_mois>0){
												$id_mois_max = $id_mois;
											}
										}else {
											$step_3 = true;
										}
									}
									
									if($step_3 == true){
										if($j==4){
											if(!empty($str)){
												$id_mois = get_id_mois(trim($str));
												if($id_mois == 0){
													drupal_set_message(t("La colonne 'Mois' contient une erreur : vérifier le mois de fin '$str' de l'intervalle. (".real_line($i).")"), $type = 'error', $repeat = true);												
													$valid = false;
												}else if($id_mois>0){
													$id_mois_max = $id_mois;
												}
											}
										}
										if($j==5){
											if(!is_numeric($str)){
												drupal_set_message(t("La colonne 'Mois' contient une erreur : vérifier l'année de fin '$str' de l'intervalle. (".real_line($i).")"), $type = 'error', $repeat = true);
												$valid = false;
											}else {
												$annee_max = $str;
											}	
										}
									}else {
										if($j==4){
											if(!empty($str)){
												if(!is_numeric($str)){
													drupal_set_message(t("La colonne 'Mois' contient une erreur : vérifier l'année de fin '$str' de l'intervalle. (".real_line($i).")"), $type = 'error', $repeat = true);
													$valid = false;
												}else {
													$annee_max = $str;
													$annee_min = $annee_max;
												}		
											}
										}
									}
									$j++;
							}	
						}											
											
						//$mois_tmp = $_POST['mois'];
						
						//drupal_set_message(t("($id_mois_min, $annee_min | $id_mois_max, $annee_max (".real_line($i).")"), $type = '', $repeat = true);								
						
						if($annee_max < $annee_min ){
							drupal_set_message(t("Intervalle de date incoherente avec la période : '$line[7]'. (".real_line($i).")"), $type = 'error', $repeat = true);									
							$valid = false;
						}else{
							
							$str_dt_saisie =  $_POST['annee'].'-'.$_POST['mois'].'-01';
							$date_saisie = new Datetime($str_dt_saisie);
							$date_saisie = $date_saisie->format("Y-m-d");
							
							if( ($annee_min == $annee_max) && ($id_mois_min >  $id_mois_max) ) {
								$str_dt_debut = $annee_max.'-'.$id_mois_max.'-01'; 
								$str_dt_fin = $annee_max.'-'.$id_mois_min.'-01';
								/*$temp = $id_mois_max;
								$id_mois_max = $id_mois_min;
								$id_mois_min = $temp;*/
							}else {
								$str_dt_debut = $annee_min.'-'.$id_mois_min.'-01';
								$str_dt_fin = $annee_max.'-'.$id_mois_max.'-01'; 
							}
												
							$list_date = getinterval($str_dt_debut,$str_dt_fin);

							if (in_array($date_saisie, $list_date)) {
							  
							   if($annee_max!== 0 && $annee_min!== 0){						        
									$nb_mois = ($annee_max - $annee_min) * 12 + $id_mois_max - $id_mois_min + 1;							
							   }else $nb_mois = $id_mois_max - $id_mois_min + 1;
							   
								// Montant final : cas 87 000,00  | "33,000.00"
								if($line[8]!== ""){
									$montant = manage_montant($line[8]);

									if($montant === "0" || empty($line[8])){
										/*drupal_set_message(t("Le montant du fichier est égale à 0 ou vide. (".real_line($i).")"), $type = 'error', $repeat = true);									
										$valid = false;	*/
										$montant = 0;	
									}
									
									if(!is_numeric($montant)){
										drupal_set_message(t("Le montant '$montant' du fichier n'est pas un nombre. (".real_line($i).")"), $type = 'error', $repeat = true);
										$valid = false;
									}		
									
									$montant = intval($montant/$nb_mois);										
									if($montant<0){
										drupal_set_message(t("Intervalle de date incoherente avec la période : '$line[7]'. (".real_line($i).")"), $type = 'error', $repeat = true);									
										$valid = false;
									}
															
									$id_mois_tmp = $_POST['mois'];										
									$annee_tmp = $_POST['annee'];
									$is_montant_set = true;
								}
							}
							
						}
						
					}//cas 4 JUIN ET JUILLET 2016 et longeur sup 13 > car faut pas prendre Juillet xxxx
					else if(strpos(strtolower($line[7]), strtolower('ET')) !== false && strlen($line[7]) > 13 ){
						$j=0;
						$step_3 = false;
						//????? Double espace comment faire???
						$str_date = explode(" ", $line[7]);
						foreach($str_date as $str){
								
								if($j==0){
									$id_mois = get_id_mois(trim($str));
									if($id_mois == 0){
										drupal_set_message(t("La colonne 'Mois' contient une erreur : vérifier le mois du début '$str' de l'intervalle. (".real_line($i).")"), $type = 'error', $repeat = true);
										$valid = false;
									}else if($id_mois > 0){	
										$id_mois_min = $id_mois;
									}
								}
								
								if($j==1){
									if(!empty($str) && trim(strtolower($str)) !== trim(strtolower('ET')) ){
										if(!is_numeric($str)){
											drupal_set_message(t("La colonne 'Mois' contient une erreur : vérifier l'année du début  '$str' de l'intervalle. (".real_line($i).")"), $type = 'error', $repeat = true);
											$valid = false;
										}else {
											$annee_min = $str;
											$step_3 = true;
										}									
									}										
								}
								
								if($step_3 === true ){
									if($j==3){
										if(!empty($str) ){
											$id_mois = get_id_mois(trim($str));
											if($id_mois == 0){
												drupal_set_message(t("La colonne 'Mois' contient une erreur : vérifier le mois de fin '$str' de l'intervalle. (".real_line($i).")"), $type = 'error', $repeat = true);
												$valid = false;
											}else if($id_mois > 0){	
												$id_mois_max = $id_mois;												
											}
										}
									}	
									
									if($j==4){
										if(!empty($str)){
											if(!is_numeric($str)){
												drupal_set_message(t("La colonne 'Mois' contient une erreur : vérifier l'année de fin '$str' de l'intervalle. (".real_line($i).")"), $type = 'error', $repeat = true);
												$valid = false;
											}else {
												$annee_max = $str;
											}		
										}
									}
									
								}else {
									if($j==2){
										if(!empty($str)){
											$id_mois = get_id_mois(trim($str));
											if($id_mois == 0){
												drupal_set_message(t("La colonne 'Mois' contient une erreur : vérifier le mois de fin '$str' de l'intervalle. (".real_line($i).")"), $type = 'error', $repeat = true);
												$valid = false;
											}else if($id_mois > 0){	
												$id_mois_max = $id_mois;												
											}
										}
									}
									
									if($j==3){
											if(!empty($str)){
												if(!is_numeric($str)){
													drupal_set_message(t("La colonne 'Mois' contient une erreur : vérifier l'année de fin '$str' de l'intervalle. (".real_line($i).")"), $type = 'error', $repeat = true);
													$valid = false;
												}else {
													$annee_max = $str;
													$annee_min = $annee_max;
												}		
											}
									}
									
								}

								
							$j++;
						}	
						
						/*if($annee_max < $annee_min ){
							drupal_set_message(t("Intervalle de date incoherente avec la période : '$line[7]'. (".real_line($i).")"), $type = 'error', $repeat = false);									
							$valid = false;
						}*/
							
						//Mois .. ET Mois Annee 
						//Mois Annee ET Mois Annee										
						if( ($id_mois_min == $_POST['mois'] && $annee_min == $_POST['annee'] ) ||  ( $_POST['mois'] == $id_mois_max && $annee_max == $_POST['annee']) ){
						  
						   //$nb_mois = ($annee_max - $annee_min) * 12 + $id_mois_max - $id_mois_min + 1
							//   Montant final : Montant / nb_mois 
							if($line[8]!== ""){
								$montant = manage_montant($line[8]);
								
								if($montant === "0" || empty($line[8])){
									/*drupal_set_message(t("Le montant du fichier est égale à 0 ou vide. (".real_line($i).")"), $type = 'error', $repeat = true);									
									$valid = false;	*/
									$montant = 0;	
								}
								
								if(!is_numeric($montant)){
									drupal_set_message(t("Le montant '$line[8]' du fichier n'est pas un nombre. (".real_line($i).")"), $type = 'error', $repeat = true);									
									$valid = false;
								}	
								
								$montant = $montant/2;	
								 
								$id_mois_tmp = $_POST['mois'];										
								$annee_tmp = $_POST['annee'];
								$is_montant_set = true;
							}
						}
					}//Cas 1  FEVRIER 2016
					else {
						
						$mois = substr(trim($line[7]), 0, -4);	
						$id_mois_tmp = get_id_mois($mois);	
						if($id_mois_tmp == 0){
							drupal_set_message(t("La colonne 'Mois' contient une erreur : vérifier le mois '$mois'. (".real_line($i).")"), $type = 'error', $repeat = true);							
							$valid = false;
						}
						
						$annee_tmp = substr(trim($line[7]),strlen($mois),4);
						if(!is_numeric($annee_tmp)){
							drupal_set_message(t("La colonne 'Mois' contient une erreur : vérifier l'année '$annee_tmp'. (".real_line($i).")"), $type = 'error', $repeat = true);									
							$valid = false;
						}
						
						//ne pas tout tester si le fichier n'est pas bon
						if($annee_tmp < $_POST['annee'] && $i <= 5 ){
							drupal_set_message(t("L'année du fichier '$annee_tmp' et l'année saisie '".$_POST['annee']."' sont différentes. (".real_line($i).")"), $type = 'error', $repeat = true);									
							$valid = false;
							return;						
						}else
						if($annee_tmp < $_POST['annee'] ){
							drupal_set_message(t("L'année du fichier '$annee_tmp' est inférieure à l'année saisie '".$_POST['annee']."'. (".real_line($i).")"), $type = 'error', $repeat = true);									
							$valid = false;							
						}
					}
					
				} //if($line[7]!== "")								
				
				$li_etablissement  ="";
				$province = "";
				$district = "";
				$id_region = 0;
			    //On teste toutes les lignes pas la periode concerné seulement
				//if($annee_tmp == $annee_form && $id_mois_tmp == $id_mois_form  ){
				if(isset($line[7])){
					//REGION
						$cell_region = $line[2];
						
						if(empty($cell_region) && !empty($line[7])){
							drupal_set_message(t("Le champs région est vide. (".real_line($i).")"), $type = 'error', $repeat = true);													
							$valid = false;
						}else{
						
							// Cas 9- FIANARANTSOA:Ranohira-Isalo:xx
							if(strpos(trim(strtolower($cell_region)), trim(strtolower('Ranohira-Isalo'))) !== false ){
								
								$str_final = "FIANARANTSOA:Ranohira-Isalo";
								$id_region = get_id_region_ontm02($str_final);
								if($id_region==0){
									drupal_set_message(t("La région '$str_final' n'existe pas en base. (".real_line($i).")"), $type = 'error', $repeat = true);									
									$valid = false;
								}
								// 31 = longueur 9-FIANARANTSOA:Ranohira-Isalo:
								$len =  strlen($cell_region)-31;
								$li_etablissement = substr($cell_region,31,$len);
								  
							}else {
								
								if(strpos($cell_region, ':') !== false){
									
								}else {
									drupal_set_message(t("Erreur sur le format de la région '$cell_region'. (".real_line($i).")"), $type = 'error', $repeat = true);														
									$valid = false;
								}
								
								$str_region = explode("-", $cell_region);
								$k=0;
								//$region_1 = $str_region[0];
								foreach($str_region as $str1){
									if($k==1){
										$str_reg_1 = explode(":", $str1);	
										
										$j=0;
										foreach($str_reg_1 as $str2){
											if($j == 0){
												$province = $str2;
											}else if($j == 1){
												$district = $str2;														
											}else if($j == 2){
												$li_etablissement = $str2;
											}
											$j++;
										}
										
										if($li_etablissement == "" && $province !== "" && $district !== ""){
											//Cas  5- TOLAGNARO:ROVA HOTEL
											$str_region = $province;
											$str_final = str_replace("'","''",$str_region);
											$id_region = get_id_region_ontm02($str_final);
											if($id_region==0){
												drupal_set_message(t("La région '$str_final' n'existe pas en base. (".real_line($i).")"), $type = 'error', $repeat = true);														
												$valid = false;
											}
											
											$li_etablissement = $district;															
											
										}else{
											// Cas 9- FIANARANTSOA:Manakara:LA VANILLE
											$str_region = $province.":".$district;
											$str_final = str_replace("'","''",$str_region);
											//drupal_set_message(t("region : $str_final"), $type = '', $repeat = true);
											$id_region = get_id_region_ontm02($str_final);
											if($id_region==0){
												drupal_set_message( t("La région '$str_final' n'existe pas en base. (".real_line($i).")"), $type = 'error', $repeat = true);													
												$valid = false;
											}
										}	
									}
								   $k++;
								}
							}					
						}
				}	
					
				//ETABLISSEMENT					
				if(isset($line[6]) && $line[6]!== ""){
					$li_etablissement = $line[6];						
				}
					
				//Classement de l'hotel
				if(isset($line[3])){
					$classement = $line[3];
					$id_classement_etablissement = get_id_classement_etablissement($classement);
				}
					
				//MONTANT 
				//cas 87 000,00  | "33,000.00"
				if(isset($line[8]) && !$is_montant_set){
					$string = $line[8];
					$montant = manage_montant($string);	
					
					if($montant === "0" || empty($line[8])){														
						$montant = 0;	
					}
						
					if(!is_numeric($montant)){
						drupal_set_message(t("Le montant '$montant' du fichier n'est pas un nombre. (".real_line($i).")"), $type = 'error', $repeat = true);
						$valid = false;
					}						
				}	
					
									
					
				//NB_CH 										
				$nb_chambre=0;
				if(isset($line[4])){
					if(!is_numeric($line[4]) && $line[4] !== "" ){
						drupal_set_message(t("Le nombre de chambre '$line[4]' du fichier n'est pas un nombre. (".real_line($i).")"), $type = 'error', $repeat = true);
						$valid = false;
					}else {
						$nb_chambre = $line[4]!==""?$line[4]:0;
					}
				}
					
				/*if(!is_numeric($montant)){
						drupal_set_message(t("$str_final, $id_region, ($li_etablissement,$id_etablissement), $montant"), $type = '', $repeat = true);
				}*/
				
				if($annee_tmp == $_POST['annee'] && $id_mois_tmp == $_POST['mois']  ){	
				
					if($montant!==0 && $id_region !==0 && $id_mois_tmp!==0 && $annee_tmp!==0 && $nb_chambre!==0){
						$data[] = array(
							'id_region' =>  $id_region,
							'nb_chambres' => $nb_chambre,
							'li_etablissement' => $li_etablissement,
							'id_etablissement' => $id_etablissement,
							'id_mois' => $id_mois_tmp,
							'id_classement_etablissement' => $id_classement_etablissement,
							'annee' => $annee_tmp,
							'montant' => $montant,						
						);
					}
					
					
				}
				//reset
				$li_etablissement  ="";
				$province = "";
				$district = "";
				$annee_tmp = 0;
				$id_mois_tmp = 0;
		}	
	//}
	fclose($handle);
	
	return $data;
	
}

//Cas fichier 2 sans entete Simulation Recettes Vignettes
	/*
	0 Etablissement
	1 CAT
	2 NBRE CH;
	3 Taux VT;
	4 Mois;
	5 Montant (50%);
	6 Taux d'occupation	
*/

function cas_fichier_2($handle , $delimiterLine, &$valid){
	
	
	$data = array();
    $i=1;$mois;
	$str_final="";
	$li_etablissement="";
	$id_etablissement=0;
	$id_classement_etablissement=0;
    
   
    //if (!$error) {
		while(($line = fgetcsv($handle, 0, $delimiterLine, '"')) !== FALSE) {
		        $id_mois_min=0; $id_mois_max=0; $annee_min=0;$annee_max=0;
				$annee_min_actif =false;$is_montant_set=false;	$annee_tmp=0;	
				$max_au = false;$max_et= false;

				$i++;
				
				if(isset($line[0]) && ( strpos($line[0], 'Moyenne') !== false )) continue;
				//if($i==5000) break;
				
				if(isset($line[4]) && $line[4]=="TOTAL") break;
				if(isset($line[4]) && $line[4]!== "" ){
					
					//drupal_set_message(t("Champs mois".$line[4]), $type = '', $repeat = true);
					//cas 2 JANVIER AU FEVRIER 2016
					if(strpos(strtolower($line[4]), strtolower('AU')) !== false || strpos(strtolower($line[4]), strtolower(' A '))){
						//drupal_set_message(t("Cas 2".$line[4]), $type = '', $repeat = true);
						//cas 3 DECEMBRE x AU FEVRIER 2016
						$j=0;
						$step_2 = false;
						$step_3 = false;
						
						//ici cas 2 JANVIER A FEVRIER 2016
						if(strpos(strtolower($line[4]), strtolower(' A '))){
							$str_date2 = multiexplode(array(" ",strtolower(' A ')),strtolower($line[4]));	
							foreach($str_date2 as $str){
							
									if($j==0){
										$id_mois = get_id_mois(trim($str));
										if($id_mois == 0){
											drupal_set_message(t("La colonne 'Mois' contient une erreur : vérifier le mois du début '$str' de l'intervalle. (".real_line($i).")"), $type = 'error', $repeat = true);
											$valid = false;
										}else if($id_mois > 0){	
											$id_mois_min = $id_mois;
										}
									}

									if($j==1){
										if(!empty($str)){
											if(!is_numeric($str)){
												
												$id_mois = get_id_mois(trim($str));
												if($id_mois == 0){
													drupal_set_message(t("La colonne 'Mois' contient une erreur : vérifier le mois ou l'année de fin '$str' de l'intervalle. (".real_line($i).")"), $type = 'error', $repeat = true);											
													$valid = false;
												}else {
													$id_mois_max = $id_mois;													
												}
											}else {
												$annee_min = $str;
												$step_2 = true;
											}
										}
									}															
									
									if($step_2 == true){
										if($j==2){
											if(!empty($str)){
												$id_mois = get_id_mois(trim($str));
												if($id_mois == 0){
													drupal_set_message(t("La colonne 'Mois' contient une erreur : vérifier le mois de fin '$str' de l'intervalle. (".real_line($i).")"), $type = 'error', $repeat = true);												
													$valid = false;
												}else if($id_mois>0){
													$id_mois_max = $id_mois;
												}
											}
										}
										if($j==3){
											if(!is_numeric($str)){
												drupal_set_message(t("La colonne 'Mois' contient une erreur : vérifier l'année de fin '$str' de l'intervalle. (".real_line($i).")"), $type = 'error', $repeat = true);
												$valid = false;
											}else {
												$annee_max = $str;
											}	
										}
									}else {
										if($j==2){
											if(!empty($str)){
												if(!is_numeric($str)){
													drupal_set_message(t("La colonne 'Mois' contient une erreur : vérifier l'année de fin '$str' de l'intervalle. (".real_line($i).")"), $type = 'error', $repeat = true);
													$valid = false;
												}else {
													$annee_max = $str;
												}		
											}
										}
									}
									$j++;
							}	
						}else if(strpos(strtolower($line[4]), strtolower('AU')) !== false) {
							$str_date2 = multiexplode(array(" ",strtolower("AU")),strtolower($line[4]));	
							foreach($str_date2 as $str){
							
									if($j==0){
										$id_mois = get_id_mois(trim($str));
										if($id_mois == 0){
											drupal_set_message(t("La colonne 'Mois' contient une erreur : vérifier le mois du début '$str' de l'intervalle. (".real_line($i).")"), $type = 'error', $repeat = true);
											$valid = false;
										}else if($id_mois > 0){	
											$id_mois_min = $id_mois;
										}
									}

									if($j==1){
										if(!empty($str)){
											if(!is_numeric($str)){
												drupal_set_message(t("La colonne 'Mois' contient une erreur : vérifier l'année du début '$str' de l'intervalle. (".real_line($i).")"), $type = 'error', $repeat = true);
												$valid = false;
											}else {
												$annee_min = $str;
											}
										}
									}
									
									if($j==3){
										if(!empty($str)){
											$id_mois = get_id_mois(trim($str));
											if($id_mois == 0){
												drupal_set_message(t("La colonne 'Mois' contient une erreur : vérifier le mois de fin '$str' de l'intervalle. (".real_line($i).")"), $type = 'error', $repeat = true);											
												$valid = false;
											}else if($id_mois>0){
												$id_mois_max = $id_mois;
											}
										}else {
											$step_3 = true;
										}
									}
									
									if($step_3 == true){
										if($j==4){
											if(!empty($str)){
												$id_mois = get_id_mois(trim($str));
												if($id_mois == 0){
													drupal_set_message(t("La colonne 'Mois' contient une erreur : vérifier le mois de fin '$str' de l'intervalle. (".real_line($i).")"), $type = 'error', $repeat = true);												
													$valid = false;
												}else if($id_mois>0){
													$id_mois_max = $id_mois;
												}
											}
										}
										if($j==5){
											if(!is_numeric($str)){
												drupal_set_message(t("La colonne 'Mois' contient une erreur : vérifier l'année  de fin '$str' de l'intervalle. (".real_line($i).")"), $type = 'error', $repeat = true);
												$valid = false;
											}else {
												$annee_max = $str;
											}	
										}
									}else {
										if($j==4){
											if(!empty($str)){
												if(!is_numeric($str)){
													drupal_set_message(t("La colonne 'Mois' contient une erreur : vérifier l'année  de fin '$str' de l'intervalle. (".real_line($i).")"), $type = 'error', $repeat = true);
													$valid = false;
												}else {
													$annee_max = $str;
													$annee_min = $annee_max;
												}		
											}
										}
									}
									$j++;
							}	
						}											
											
						if($annee_max < $annee_min ){
							drupal_set_message(t("Intervalle de date incoherente avec la période : '$line[4]'. (".real_line($i).")"), $type = 'error', $repeat = true);									
							$valid = false;
						}else{
							
							$str_dt_saisie =  $_POST['annee'].'-'.$_POST['mois'].'-01';
							$date_saisie = new Datetime($str_dt_saisie);
							$date_saisie = $date_saisie->format("Y-m-d");
							
							if(($annee_min == $annee_max) && ($id_mois_min >  $id_mois_max) ) {
								
								$str_dt_debut = $annee_max.'-'.$id_mois_max.'-01'; 
								$str_dt_fin = $annee_max.'-'.$id_mois_min.'-01';
								
								/*$temp = $id_mois_max;
								$id_mois_max = $id_mois_min;
								$id_mois_min = $temp;*/
								
							}else {
								$str_dt_debut = $annee_min.'-'.$id_mois_min.'-01';
								$str_dt_fin = $annee_max.'-'.$id_mois_max.'-01'; 
							}
												
							$list_date = getinterval($str_dt_debut,$str_dt_fin);
							
							if (in_array($date_saisie, $list_date)) {	
								
							   if($annee_max!== 0 && $annee_min!== 0){						        
									$nb_mois = ($annee_max - $annee_min) * 12 + $id_mois_max - $id_mois_min + 1;							
							   }else $nb_mois = $id_mois_max - $id_mois_min + 1;
							   
								// Montant final : cas 87 000,00  | "33,000.00"
								if($line[5]!== ""){
									$montant = manage_montant($line[5]);

									if($montant === "0" || empty($line[5])){
										/*drupal_set_message(t("Le montant du fichier est égale à 0 ou vide. (".real_line($i).")"), $type = 'error', $repeat = true);									
										$valid = false;	*/
										$montant = 0;	
									}
									
									if(!is_numeric($montant)){
										drupal_set_message(t("Le montant '$montant' du fichier n'est pas un nombre. (".real_line($i).")"), $type = 'error', $repeat = true);
										$valid = false;
									}		
									
									$montant = intval($montant/$nb_mois);										
									if($montant<0){
										drupal_set_message(t("Intervalle de date incoherente avec la période : '$line[4]'. (".real_line($i).")"), $type = 'error', $repeat = true);									
										$valid = false;
									}
															
									$id_mois_tmp = $_POST['mois'];										
									$annee_tmp = $_POST['annee'];
									$is_montant_set = true;
								}
							}
							
						}
							
						
					}//cas 4 JUIN ET JUILLET 2016 et longeur sup 13 > car faut pas prendre Juillet xxxx
					else if(strpos(strtolower($line[4]), strtolower('ET')) !== false && strlen($line[4]) > 13 ){
						$j=0;
						$step_3 = false;
						//????? Double espace comment faire???
						$str_date = explode(" ", $line[4]);
						foreach($str_date as $str){
								
								if($j==0){
									$id_mois = get_id_mois(trim($str));
									if($id_mois == 0){
										drupal_set_message(t("La colonne 'Mois' contient une erreur : vérifier le mois  du début '$str' de l'intervalle. (".real_line($i).")"), $type = 'error', $repeat = true);
										$valid = false;
									}else if($id_mois > 0){	
										$id_mois_min = $id_mois;
									}
								}
								
								if($j==1){
									if(!empty($str) && trim(strtolower($str)) !== trim(strtolower('ET')) ){										
										if(!is_numeric($str)){
											drupal_set_message(t("La colonne 'Mois' contient une erreur : vérifier l'année du début '$str' de l'intervalle. (".real_line($i).")"), $type = 'error', $repeat = true);
											$valid = false;
										}else {
											$annee_min = $str;
											$step_3 = true;
										}									
									}										
								}
								
								if($step_3 === true ){
									if($j==3){
										if(!empty($str) ){
											$id_mois = get_id_mois(trim($str));
											if($id_mois == 0){
												drupal_set_message(t("La colonne 'Mois' contient une erreur : vérifier le mois de fin '$str' de l'intervalle. (".real_line($i).")"), $type = 'error', $repeat = true);
												$valid = false;
											}else if($id_mois > 0){	
												$id_mois_max = $id_mois;												
											}
										}
									}	
									
									if($j==4){
										if(!empty($str)){
											if(!is_numeric($str)){
												drupal_set_message(t("La colonne 'Mois' contient une erreur : vérifier l'année de fin '$str' de l'intervalle. (".real_line($i).")"), $type = 'error', $repeat = true);
												$valid = false;
											}else {
												$annee_max = $str;
											}		
										}
									}
									
								}else {
									
									if($j==2){
										if(!empty($str)){
											$id_mois = get_id_mois(trim($str));
											if($id_mois == 0){
												drupal_set_message(t("La colonne 'Mois' contient une erreur : vérifier le mois de fin '$str' de l'intervalle. (".real_line($i).")"), $type = 'error', $repeat = true);
												$valid = false;
											}else if($id_mois > 0){	
												$id_mois_max = $id_mois;												
											}
										}
									}
									
									if($j==3){
											if(!empty($str)){
												if(!is_numeric($str)){
													drupal_set_message(t("La colonne 'Mois' contient une erreur : vérifier l'année de fin '$str' de l'intervalle. (".real_line($i).")"), $type = 'error', $repeat = true);
													$valid = false;
												}else {
													$annee_max = $str;
													$annee_min = $annee_max;
												}		
											}
									}
								}

								
							$j++;
						}	
						
						/*if($annee_max < $annee_min ){
							drupal_set_message(t("Intervalle de date incoherente avec la période : '$line[4]'. (".real_line($i).")"), $type = 'error', $repeat = false);									
							$valid = false;
						}*/
						

						//Mois .. ET Mois Annee 
						//Mois Annee ET Mois Annee
						/*drupal_set_message(t("$id_mois_min = ".$_POST['mois'].", $annee_min = ".$_POST['annee'].
										" | $id_mois_max = ".$_POST['mois'].", $annee_max = ".$_POST['annee']."(".real_line($i).")"), $type = '', $repeat = true);	*/					
						if( ($id_mois_min == $_POST['mois'] && $annee_min == $_POST['annee'] ) ||  ( $_POST['mois'] == $id_mois_max && $annee_max == $_POST['annee']) ){
						  
						   //$nb_mois = ($annee_max - $annee_min) * 12 + $id_mois_max - $id_mois_min + 1
							//   Montant final : Montant / nb_mois 
							if($line[5]!== ""){
								$montant = manage_montant($line[5]);
								
								if($montant === "0" || empty($line[5])){
									/*drupal_set_message(t("Le montant du fichier est égale à 0 ou vide. (".real_line($i).")"), $type = 'error', $repeat = true);									
									$valid = false;	*/
									$montant = 0;	
								}
								
								if(!is_numeric($montant)){
									drupal_set_message(t("Le montant '$line[5]' du fichier n'est pas un nombre. (".real_line($i).")"), $type = 'error', $repeat = true);									
									$valid = false;
								}	
								
								$montant = $montant/2;	
								 
								$id_mois_tmp = $_POST['mois'];										
								$annee_tmp = $_POST['annee'];
								$is_montant_set = true;
							}
						}
					}//Cas 1  FEVRIER 2016
					else {
						
						$mois = substr(trim($line[4]), 0, -4);	
						$id_mois_tmp = get_id_mois($mois);	
						if($id_mois_tmp == 0){
							drupal_set_message(t("La colonne 'Mois' contient une erreur : vérifier le mois '$mois'. (".real_line($i).")"), $type = 'error', $repeat = true);							
							$valid = false;
						}
						
						$annee_tmp = substr(trim($line[4]),strlen($mois),4);
						if(!is_numeric($annee_tmp)){
							drupal_set_message(t("La colonne 'Mois' contient une erreur : vérifier l'année '$annee_tmp'. (".real_line($i).")"), $type = 'error', $repeat = true);									
							$valid = false;
						}
						
						//ne pas tout tester si le fichier n'est pas bon
						if($annee_tmp < $_POST['annee'] && $i <= 5 ){
							drupal_set_message(t("L'année du fichier '$annee_tmp' et l'année saisie '".$_POST['annee']."' sont différentes. (".real_line($i).")"), $type = 'error', $repeat = true);									
							$valid = false;
							return;						
						}else
						if($annee_tmp < $_POST['annee'] ){
							drupal_set_message(t("L'année du fichier '$annee_tmp' est inférieure à l'année saisie '".$_POST['annee']."'. (".real_line($i).")"), $type = 'error', $repeat = true);									
							$valid = false;							
						}
					}
					
				} //if($line[4]!== "")								
				
				$li_etablissement  ="";
				$province = "";
				$district = "";
				$id_region  = 0;
			    //On teste toutes les lignes pas la periode concerné seulement
				//if($annee_tmp == $annee_form && $id_mois_tmp == $id_mois_form  ){
				if(isset($line[4])){
					//REGION
						$cell_region = $line[0];
						
						if(empty($cell_region) && !empty($line[4])){
							drupal_set_message(t("Le champs région est vide. (".real_line($i).")"), $type = 'error', $repeat = true);													
							$valid = false;
						}else{
						
							// Cas 9- FIANARANTSOA:Ranohira-Isalo:xx
							if(strpos(trim(strtolower($cell_region)), trim(strtolower('Ranohira-Isalo'))) !== false ){
								
								$str_final = "FIANARANTSOA:Ranohira-Isalo";
								$id_region = get_id_region_ontm02($str_final);
								if($id_region==0){
									drupal_set_message(t("La région '$str_final' n'existe pas en base. (".real_line($i).")"), $type = 'error', $repeat = true);									
									$valid = false;
								}
								// 31 = longueur 9-FIANARANTSOA:Ranohira-Isalo:
								$len =  strlen($cell_region)-31;
								$li_etablissement = substr($cell_region,31,$len);
								  
							}else {
								
								if(strpos($cell_region, ':') !== false){
									
								}else {
									drupal_set_message(t("Erreur sur le format de la région '$cell_region'. (".real_line($i).")"), $type = 'error', $repeat = true);														
									$valid = false;
								}
								
								$str_region = explode("-", $cell_region);								
								
								$k=0;
								//$region_1 = $str_region[0];
								foreach($str_region as $str1){
									
									
									if($k==1){
										$str_reg_1 = explode(":", $str1);	
										
										$j=0;
										foreach($str_reg_1 as $str2){
											
											if($j == 0){
												$province = $str2;
											}else if($j == 1){
												$district = $str2;														
											}else if($j == 2){
												$li_etablissement = $str2;
											}
											$j++;
																						
										}
										
										
										
										if($li_etablissement == "" && $province !== "" && $district !== ""){
											//Cas  5- TOLAGNARO:ROVA HOTEL
											$str_region = $province;
											$str_final = str_replace("'","''",$str_region);
											$id_region = get_id_region_ontm02($str_final);
											if($id_region==0){
												drupal_set_message(t("La région '$str_final' n'existe pas en base. (".real_line($i).")"), $type = 'error', $repeat = true);														
												$valid = false;
											}
											
											$li_etablissement = $district;															
											
										}else{
											// Cas 9- FIANARANTSOA:Manakara:LA VANILLE
											$str_region = $province.":".$district;
											$str_final = str_replace("'","''",$str_region);
											//drupal_set_message(t("region : $str_final"), $type = '', $repeat = true);
											$id_region = get_id_region_ontm02($str_final);
											if($id_region==0){
												drupal_set_message( t("La région '$str_final' n'existe pas en base. (".real_line($i).")"), $type = 'error', $repeat = true);													
												$valid = false;
											}
										}	
									}
								   $k++;
								}
							}					
						}
				}	
					
				/*	//ETABLISSEMENT					
					if(isset($line[6]) && $line[6]!== ""){
						$li_etablissement = $line[6];						
					}
				*/	
				//Classement de l'hotel
				if(isset($line[1])){
					$classement = $line[1];
					$id_classement_etablissement = get_id_classement_etablissement($classement);
				}
					
				//MONTANT 
				//cas 87 000,00  | "33,000.00"
				if(isset($line[5]) && !$is_montant_set){
					$string = $line[5];
					$montant = manage_montant($string);	
						
					if($montant === "0" || empty($line[5])){														
						$montant = 0;	
					}
						
					if(!is_numeric($montant)){
						drupal_set_message(t("Le montant '$montant' du fichier n'est pas un nombre. (".real_line($i).")"), $type = 'error', $repeat = true);
						$valid = false;
					}						
				}	
					
									
					
				//NB_CH 										
				$nb_chambre=0;
				if(isset($line[2])){
					if(!is_numeric($line[2]) && $line[2] !== "" ){
						drupal_set_message(t("Le nombre de chambre '$line[2]' du fichier n'est pas un nombre. (".real_line($i).")"), $type = 'error', $repeat = true);
						$valid = false;
					}else {
						$nb_chambre = $line[2]!==""?$line[2]:0;
					}
				}
					
				/*if(!is_numeric($montant)){
						drupal_set_message(t("$str_final, $id_region, ($li_etablissement,$id_etablissement), $montant"), $type = '', $repeat = true);
				}*/
				
				if($annee_tmp == $_POST['annee'] && $id_mois_tmp == $_POST['mois']  ){	
				
					if($montant!==0 && $id_region !==0 && $id_mois_tmp!==0 && $annee_tmp!==0 && $nb_chambre!==0){
						$data[] = array(
							'id_region' =>  $id_region,
							'nb_chambres' => $nb_chambre,
							'li_etablissement' => $li_etablissement,
							'id_etablissement' => $id_etablissement,
							'id_mois' => $id_mois_tmp,
							'id_classement_etablissement' => $id_classement_etablissement,
							'annee' => $annee_tmp,
							'montant' => $montant,						
						);
					}
					
					
				}
				//reset
				$li_etablissement  ="";
				$province = "";
				$district = "";
				$annee_tmp = 0;
				$id_mois_tmp = 0;
		}	
	//}
	fclose($handle);
	
	return $data;
	
}

function multiexplode ($delimiters,$string) {
    
    $ready = str_replace($delimiters, $delimiters[0], $string);
    $launch = explode($delimiters[0], $ready);
    return  $launch;
}

function real_line($i){
	return $_POST['annee'] !== '2013' ? $i :($i*2)-1;
}

function manage_montant($string){

	if($string!==0 || empty($string)){
		if(strpos($string, ',') !== false ){ 
			$str = substr(trim($string), 0, -3);
			$mt = str_replace(",", "", $str);
			$mt = str_replace(" ", "", $mt);
		}else{ 				
			$mt = str_replace(" ", "", $string);
		}
	}		
	
	return $mt;
}

function get_id_region_ontm02($libelle) {
	
	if ( mb_detect_encoding($libelle, 'UTF-8', true) === false ){
		$str = utf8_encode(trim(strtolower($libelle)));
	}else {
		$str = trim(strtolower($libelle));
	}
	
	
	$id_region =0;
	$sql = "SELECT id_region FROM siit_region  
			WHERE lower(li_region) = '".$str."'"; 
		
	$results = db_query($sql);
	foreach($results as $result) {
		$id_region = $result->id_region;
	}	
		
	if (empty($id_region)) {
		$sql = "SELECT id_region FROM {siit_region_entite} p WHERE 
				 lower(li_region) ='".$str."'"; 
		$results = db_query($sql);
		foreach($results as $result) {
			$id_region = $result->id_region;
		}
	}	   
		
	return $id_region;	
}

function import_data_etablissement_ontm_02_old($value){
	
	if ( mb_detect_encoding($value["li_etablissement"], 'UTF-8', true) === false ){
		$li_etablissement = utf8_encode($value["li_etablissement"]);
	}else {
		$li_etablissement = $value["li_etablissement"];
	}
	//$li_etablissement = str_replace( "'", "\'", $li_etablissement );
	
	
	list($id_etablissement,$annee) = get_id_etablissement($value);
	
	if($id_etablissement==0){
        $id_etablissement =   db_insert('siit_etablissement')
				->fields(array('li_etablissement', 'li_enseigne', 'id_region', 'li_adresse', 'nb_emplois_nationaux', 'nb_emplois_etrangers',
				'id_activite_etablissement','mt_investissement', 'dt_autorisation', 'num_autorisation', 'nb_chambres', 'nb_places_repas',
				'fixe',	'mobile', 'email' ,'website',
				'id_nationalite_promoteur', 'id_classement_etablissement', 'id_importation'))
				->values(array(
					'li_etablissement' => $li_etablissement,
					'li_enseigne' => $li_etablissement,
					'id_region' => $value["id_region"],
					'li_adresse' => "",
					'id_activite_etablissement' => 9, //Comme on ne connait pas, on met Hotel-Restaurant
					'mt_investissement' => 0,
					'num_autorisation' => 0,
					'dt_autorisation' => '2010-01-01',
					'id_nationalite_promoteur' => 0,
					'id_classement_etablissement' => $value["id_classement_etablissement"],
					'nb_chambres' => $value["nb_chambres"],
					'nb_places_repas' => 0,
					'fixe' => '',
					'mobile' => '',
					'email' => '',
					'website' => '',
					'nb_emplois_nationaux' => 0,	           					
					'nb_emplois_etrangers' => 0,
					'id_importation' => 0, 
				))
			->execute();
	}
	return 	 $id_etablissement;	
}


function import_data_ontm_02_old($value,$id_importation,$id_etab){
    
		$id_etablissement = $id_etab!=0?$id_etab:$value["id_etablissement"];
	
        db_insert('siit_vignette_touristique')
				->fields(array('id_etablissement', 'id_mois', 'annee', 
				'mt_vignette_touristique','nb_chambres', 'id_importation'))
				->values(array(
					'id_etablissement' => $id_etablissement,
					'id_mois' => $value["id_mois"],
					'annee' => $value["annee"],	           					
					'mt_vignette_touristique' => $value["montant"] ? $value["montant"]:0,
					'nb_chambres' => $value["nb_chambres"],
					'id_importation' => $id_importation, 
				))
			->execute();
		
		//Mettre à jour le classement
		if($id_etablissement){
			$num_updated = db_update('siit_etablissement')
				->fields(array('id_classement_etablissement' => $value["id_classement_etablissement"],))
				->condition('id_etablissement', $id_etablissement)
				->execute();						
		}
		
  
}


function getinterval($strDate1,$strDate2){
	$date3=new Datetime($strDate1);
	$date4=new Datetime($strDate2);
	
	$interval = $date3->diff($date4);
	$ecarmois=(int)$interval->format('%R%m');
	$ecarannee = (int)$interval->format('%R%y');
	$ecarmois = $ecarannee*12 + $ecarmois;
	$datedeb = $date3;
	if($ecarmois <0){
		$datedeb = $date4;
		$ecarmois = - $ecarmois;
	}
	
	$listdate[] = $datedeb->format("Y-m-d");
	for($i = 0;$i<$ecarmois ; $i++){
		$datedeb->add(new DateInterval('P1M'));
		$listdate[] = $datedeb->format("Y-m-d");
	}
	return $listdate;
}

