<?php

/**
* @file
* Display a ONTM Importation formulaire
*/



	function siit_importation_ontm_02_menu(){
    $items = array();
    $items['siit_importation_ontm_02'] = array(
        'title'            => t('Formulaire importation'), 
        'page callback'    => 'drupal_get_form',
        'page arguments' => array('siit_importation_ontm_02_form'),
        'access arguments' => array('access siit_importation_ontm_02'),
        'type'             => MENU_LOCAL_TASK,
    		//'access callback' => TRUE,
    );
    
    return $items;
    
}  

function siit_importation_ontm_02_permission() {
  return array( 
    'access siit_importation_ontm_02' => array(
      'title' => t('siit_importation_ontm_02 : Ontm vignettes importation formulaire'),
      'description' => t('Perform administration tasks for ontm importation formulaire.'),
    ),
  );
}

function siit_importation_ontm_02_form($form, &$form_state) {
	
	drupal_set_title(t('IMPORTATION DES VIGNETTES TOURISTIQUES (ONTM)'));
	
	 if(!isset($form_state['storage']['confirm'])){			 
	        return get_siit_importation_ontm_02_form($form, $form_state);
	    }
        else{
            list($id_importation,$question) = searchDataExist(ENTITE_ONTM02, $_POST['annee'], $_POST['mois'], STATUT_AVALIDER, false);
			
			if($id_importation){
                  $path = 'siit_importation_ontm_02';
                  $description = '';
                  $yes = 'Oui';
                  $no = 'Non';
                  $form = confirm_form($form, $question, $path, $description, $yes, $no);
                  $form['annee'] = array('#type' => 'hidden', '#value' => $_POST['annee']);
				  $form['mois'] = array('#type' => 'hidden', '#value' => $_POST['mois']);
                  $form['csv_file'] = array('#type' => 'hidden', '#value' => $_POST['csv_file']);
                  $form['chemin'] = array('#type' => 'hidden', '#value' => $form_state['storage']['uri']);
                  $form['actions']['submit'] = array(
                    '#type' => 'submit',
                    '#value' => $yes,
                    '#attributes' => array('class' => array('button button--primary js-form-submit form-submit btn-success btn'),),
            	    '#submit' => array('csv_import_ontm_02_submit'),
                  );  
                  $form['#attached']['css'] = array(
                      drupal_get_path('module', 'siit_importation_ontm_02') . '/css/ontm.css'
                  );
                  return $form;
            }
            else csv_import_ontm_02_submit($form, $form_state);
        }
	
}

function get_siit_importation_ontm_02_form($form, $form_state){

	$form['annee'] = array(
	    "#type" => "select",      
	    "#title" => t("Année :"),
	    "#options" => optionYear(),
	    "#required" => TRUE,
		);
	
	$form["mois"] = array(
	    "#type" => "select",      
	    "#title" => t("Mois :"),
	    "#options" => optionMonth(false),
	    "#required" => TRUE,
	    );	
	    
	 $form['importation']["template"] = array(
	    "#markup" => "Cliquez ici pour télécharger un exemple de <a href='sites/default/files/templates/SIIT_ONTM.xlsx' target='_blank'>template</a>",      
	    );	
	    
	
   $form['importation']['csv_file'] = array(
	        '#title' => 'Importer Fichier :', // Titre dans la page d'importation du fichier
	        '#description' => 'Seuls ces fichiers xlsx sont valides.',
	        '#type' => 'managed_file',
	        '#required' => TRUE,
	        '#upload_validators' => array(
	            'file_validate_extensions' => array('xlsx'),
	        ),
	    );
	    
	
	 $form['importation']['submit'] = array(
	        '#type' => 'submit',
	        '#value' => t('Process'),
	        '#attributes' => array('class' => array('button button--primary js-form-submit form-submit btn-success btn'),),
			'#validate' => array('csv_import_ontm_02_validate'),
	    	'#submit' => array('csv_import_ontm_02_submit'),
	 );
	    
	    
	 $form['importation']['back'] = array('#type' => 'submit', '#value' => t('Back'));
   	 $form['importation']['back']['#submit'] = array('siit_back_ontm02_submit');
	 $form['importation']['back']['#limit_validation_errors'] = array();
	 $form['importation']['back']['#name'] = 'back';
	 
	
	$form['#attributes']['class'][] = 'import-form';
	return $form;
	
}

function csv_import_ontm_02_validate($form, &$form_state){

	$region="";
	$li_etablissement;
	//;
    //$etrangers ;
	$row_begin =0 ;
	$col_begin=0;
	$cell_="";
	$valid = false;
	
	
	if(!empty($_POST['annee']) && !empty($_POST['mois'])){
		//Controle si un import validé existe déjà
		list($id_importation,$question) = searchDataExist(ENTITE_ONTM02, $_POST['annee'], $_POST['mois'], STATUT_VALIDE, false);
	}
	
	
	// Récupération du fichier 
	if($form_state['values']['csv_file'] && empty($id_importation)){	
		$valid = true;
					
		$file = file_load($form_state['values']['csv_file']);
		$uri = $file->uri;
		$path = drupal_realpath($uri);
		try {
			$inputFileType = PHPExcel_IOFactory::identify($path);	
			$objReader = PHPExcel_IOFactory::createReader($inputFileType);		
			$objPHPExcel = $objReader->load($path);				
		} catch (Exception $e) {}
		
					
		
		//Test champs
		$numWorksheet = 0;
		foreach ($objPHPExcel->getWorksheetIterator() as $worksheet) {
			if($numWorksheet == 0) { //On importe uniquement le 1er onglet
			
			    $numWorksheet++;
				$highestRow         = $worksheet->getHighestRow(); 
				$highestColumn      = $worksheet->getHighestColumn(); 
				$highestColumnIndex = PHPExcel_Cell::columnIndexFromString($highestColumn);
				
				if ($highestColumnIndex == 8){
					form_set_error('edit-annee', t("L'année des données doit être indiquée en celulle I1."));
					return;
				}
				
				
				for ($row = 1; $row <= $highestRow; ++ $row) {
				
					$line = array();
					$line[0] = $worksheet->getCellByColumnAndRow(0, $row)->getValue();
					$line[1] = $worksheet->getCellByColumnAndRow(1, $row)->getValue();
					$line[2] = $worksheet->getCellByColumnAndRow(2, $row)->getValue();
					$line[3] = $worksheet->getCellByColumnAndRow(3, $row)->getValue();
					$line[4] = $worksheet->getCellByColumnAndRow(4, $row)->getValue();
					$line[5] = $worksheet->getCellByColumnAndRow(5, $row)->getValue();
					$line[6] = $worksheet->getCellByColumnAndRow(6, $row)->getValue();
					$line[7] = $worksheet->getCellByColumnAndRow(7, $row)->getValue();
					
					
					for ($col = 0; $col < $highestColumnIndex; ++ $col) {   
						
						$cell = $worksheet->getCellByColumnAndRow($col, $row)->getValue();
						if($row == 1 && $col == 0){
							//Vérifie la conformité du fichier
							
							if(trim(strtolower($cell)) == trim(strtolower("Etablissement"))){
							  $row_begin = $row;
							  $col_begin = $col;
							} else if( trim(strtolower($cell)) != trim(strtolower("Etablissement"))){
								form_set_error('edit-debut', t("Fichier non conforme. - A1 doit s'appeler : Etablissement"));
								return;
							}
						}
						if($row == 1 && $col == 1){
							//Vérifie la conformité du fichier
							if(trim(strtolower($cell)) == trim(strtolower("cat"))){
							  $row_begin = $row;
							  $col_begin = $col;
							} else if( trim(strtolower($cell)) != trim(strtolower("cat"))){
								form_set_error('edit-debut', t("Fichier non conforme. - B1 doit s'appeler : cat"));
								return;
							}
						}
						if($row == 1 && $col == 2){
							//Vérifie la conformité du fichier
							if(trim(strtolower($cell)) == trim(strtolower("Nb chb"))){
							  $row_begin = $row;
							  $col_begin = $col;
							} else if( trim(strtolower($cell)) != trim(strtolower("Nb chb"))){
								form_set_error('edit-debut', t("Fichier non conforme. - C1 doit s'appeler : Nb chb"));
								return;
							}
						}
						if($row == 1 && $col == 3){
							//Vérifie la conformité du fichier
							if(trim(strtolower($cell)) == trim(strtolower("Taux VT"))){
							  $row_begin = $row;
							  $col_begin = $col;
							} else if( trim(strtolower($cell)) != trim(strtolower("Taux VT"))){
								form_set_error('edit-debut', t("Fichier non conforme. - D1 doit s'appeler : Taux VT"));
								return;
							}
						}
						if($row == 1 && $col == 4){
							//Vérifie la conformité du fichier
							if(trim(strtolower($cell)) == trim(strtolower("Mois"))){
							  $row_begin = $row;
							  $col_begin = $col;
							} else if( trim(strtolower($cell)) != trim(strtolower("Mois"))){
								form_set_error('edit-debut', t("Fichier non conforme. - D1 doit s'appeler : Mois"));
								return;
							}
						}
						if($row == 1 && $col == 5){
							//Vérifie la conformité du fichier
							if(trim(strtolower($cell)) == trim(strtolower("Montant (50%)"))){
							  $row_begin = $row;
							  $col_begin = $col;
							} else if( trim(strtolower($cell)) != trim(strtolower("Montant (50%)"))){
								form_set_error('edit-debut', t("Fichier non conforme. - E1 doit s'appeler : Montant (50%)"));
								return;
							}
						}
					}
					
					if ($row >1) {
						$data = cas_fichier_2($line, $valid, $row);
					}
						
				}
			}
			
		}
		
	}
	
	if (!$valid) {
		//Si il y a une seule erreur, on affiche les erreurs sans aller plus loin
		form_set_error('edit-error', t("Merci de corriger les erreurs ci-dessus avant de réimporter le fichier"));
		return false;
	}
}


function csv_import_ontm_02_submit($form, &$form_state){

	if(!isset($form_state['storage']['confirm'])) {

		list($id_importation,$question) = searchDataExist(ENTITE_ONTM02, $_POST['annee'],0, STATUT_VALIDE, true) ;

        if($id_importation){
            $form_state['storage']['confirm'] = TRUE;
            $form_state['rebuild'] = TRUE;
            $form_state['storage']['csv_file'] = $form_state['values']['csv_file'];
            $file = file_load($form_state['values']['csv_file']);
            $form_state['storage']['uri'] = $file->uri;
        } else {
            $file = file_load($form_state['values']['csv_file']);
            traitement_ONTM02($file->uri,$form_state);
        }
    } else {
        if(isset($_POST["chemin"])) {
            $chemin = $_POST["chemin"];
        } else{
            $file = file_load($form_state['values']['csv_file']);
            $chemin = $file->uri;
        }

        traitement_ONTM02($chemin,$form_state);
    }

}


function traitement_ONTM02($chemin, &$form_state){

	// Récupération du fichier  
	if($form_state['values']['csv_file']){
				
		$path = drupal_realpath($chemin);
		try {
		
			$inputFileType = PHPExcel_IOFactory::identify($path);	
			$objReader = PHPExcel_IOFactory::createReader($inputFileType);		
			$objPHPExcel = $objReader->load($path);				
			
		} catch (Exception $e) {
			
		}
		
		//INSERTION siit_importation		
		// rechercher importation avec dt_import et li_fichier et id_type_fichier
		$data_import = array();
		//recup année list	
		$annee  = $form_state['values']['annee'];
		$id_mois_form = $form_state['values']['mois'];
	
		$name_file = basename($path);
					
		$data_import['annee'] = $annee;
		$data_import['id_mois'] = $id_mois_form;
		$data_import["li_fichier"] = basename($path);
		$data_import["id_statut"] = STATUT_AVALIDER;
		$data_import["id_type_fichier"] = TYPE_FICHIER_ONTM02;
			
		//On supprime l'importation existante pour l'équivalent
		controleDoublonImportation($annee, 0,ENTITE_ONTM02);
		$id_importation = insert_importation($data_import);
		
		$data = array();
		$region="";
		$li_etablissement = "";
		$id_etablissement = 0;
		$row_begin =0;
		$col_begin=0;
		$cell_="";
		
		foreach ($objPHPExcel->getWorksheetIterator() as $worksheet) {
		   
			$highestRow         = $worksheet->getHighestRow(); 
			$highestColumn      = $worksheet->getHighestColumn(); 
			$highestColumnIndex = PHPExcel_Cell::columnIndexFromString($highestColumn);
			
			//drupal_set_message(t($highestRow."ligne ".$highestColumnIndex), $type = '', $repeat = FALSE);
			
			for ($row = 2; $row <= $highestRow; ++ $row) {
			
				$line = array();
				$line[0] = $worksheet->getCellByColumnAndRow(0, $row)->getValue();
				$line[1] = $worksheet->getCellByColumnAndRow(1, $row)->getValue();
				$line[2] = $worksheet->getCellByColumnAndRow(2, $row)->getValue();
				$line[3] = $worksheet->getCellByColumnAndRow(3, $row)->getValue();
				$line[4] = $worksheet->getCellByColumnAndRow(4, $row)->getValue();
				$line[5] = $worksheet->getCellByColumnAndRow(5, $row)->getValue();
				$line[6] = $worksheet->getCellByColumnAndRow(6, $row)->getValue();
				$line[7] = $worksheet->getCellByColumnAndRow(7, $row)->getValue();
				$valid = true;
				$dataLine = cas_fichier_2($line, $valid, $row);
				if ($dataLine) {
					$value = $dataLine[0];
					
					if (isset($value["li_etablissement"])) {
						if($value["li_etablissement"] != "" && $value["id_etablissement"] == 0 ){
							//insert 			
							$id_etab = import_data_etablissement_ontm_02($value,$id_importation);
							import_data_ontm_02($value,$id_importation,$id_etab);
						} else{
							//update 
							import_data_ontm_02($value,$id_importation,0);
						}
					}	
				}
			}
		}
			
	
		drupal_set_message("L'import a été effectué avec succès.", $type = 'status');
		$form_state['redirect'] ="siit_importation_fusion_etablissement";
	}				
}




function import_data_etablissement_ontm_02($value){
	
	if ( mb_detect_encoding($value["li_etablissement"], 'UTF-8', true) === false ){
		$li_etablissement = utf8_encode($value["li_etablissement"]);
	}else {
		$li_etablissement = $value["li_etablissement"];
	}
	//$li_etablissement = str_replace( "'", "\'", $li_etablissement );
    $value["li_enseigne"] = $value["li_etablissement"];
	
	
	list($id_etablissement,$annee) = get_id_etablissement($value);
	
	if($id_etablissement==0){
        $id_etablissement =   db_insert('siit_etablissement')
				->fields(array('li_etablissement', 'li_enseigne', 'id_region', 'li_adresse', 'nb_emplois_nationaux', 'nb_emplois_etrangers',
				'id_activite_etablissement','mt_investissement', 'dt_autorisation', 'num_autorisation', 'nb_chambres', 'nb_places_repas',
				'fixe',	'mobile', 'email' ,'website',
				'id_nationalite_promoteur', 'id_classement_etablissement', 'id_importation', 'is_ontm'))
				->values(array(
					'li_etablissement' => $li_etablissement,
					'li_enseigne' => $li_etablissement,
					'id_region' => $value["id_region"],
					'li_adresse' => "",
					'id_activite_etablissement' => 9, //Comme on ne connait pas, on met Hotel-Restaurant
					'mt_investissement' => 0,
					'num_autorisation' => 0,
					'dt_autorisation' => '2010-01-01',
					'id_nationalite_promoteur' => 0,
					'id_classement_etablissement' => $value["id_classement_etablissement"],
					'nb_chambres' => $value["nb_chambres"],
					'nb_places_repas' => 0,
					'fixe' => '',
					'mobile' => '',
					'email' => '',
					'website' => '',
					'nb_emplois_nationaux' => 0,	           					
					'nb_emplois_etrangers' => 0,
					'id_importation' => 0, 
					'is_ontm' => '1'
				))
			->execute();
	}
	return 	 $id_etablissement;	
}

function import_data_ontm_02($value,$id_importation,$id_etab){
    
		$id_etablissement = $id_etab!=0?$id_etab:$value["id_etablissement"];
	
        db_insert('siit_vignette_touristique')
				->fields(array('id_etablissement', 'id_mois', 'annee', 
				'mt_vignette_touristique','nb_chambres', 'id_importation'))
				->values(array(
					'id_etablissement' => $id_etablissement,
					'id_mois' => $value["id_mois"],
					'annee' => $value["annee"],	           					
					'mt_vignette_touristique' => $value["montant"] ? $value["montant"]:0,
					'nb_chambres' => $value["nb_chambres"],
					'id_importation' => $id_importation, 
				))
			->execute();
		
		//Mettre à jour le classement
		if($id_etablissement){
			$num_updated = db_update('siit_etablissement')
				->fields(array('id_classement_etablissement' => $value["id_classement_etablissement"],
				'is_ontm' => '1'))
				->condition('id_etablissement', $id_etablissement)
				->execute();						
		}
		
  
}

function getinterval($strDate1,$strDate2){
	$date3=new Datetime($strDate1);
	$date4=new Datetime($strDate2);
	
	$interval = $date3->diff($date4);
	$ecarmois=(int)$interval->format('%R%m');
	$ecarannee = (int)$interval->format('%R%y');
	$ecarmois = $ecarannee*12 + $ecarmois;
	$datedeb = $date3;
	if($ecarmois <0){
		$datedeb = $date4;
		$ecarmois = - $ecarmois;
	}
	
	$listdate[] = $datedeb->format("Y-m-d");
	for($i = 0;$i<$ecarmois ; $i++){
		$datedeb->add(new DateInterval('P1M'));
		$listdate[] = $datedeb->format("Y-m-d");
	}
	return $listdate;
}


function multiexplode($delimiters,$string) {
   
    $string = str_replace("  ", " ",$string);
    $string = explode($delimiters, $string);
    return  $string;
    
   /* $ready = str_replace($delimiters, $delimiters[0], $string);
    $launch = explode($delimiters[0], $ready);
    return  $launch;*/
}

function real_line($row){
	return 'Ligne n° '.$row;
}

function manage_montant($string){

	if($string!==0 || empty($string)){
		if(strpos($string, ',') !== false ){ 
			$str = substr(trim($string), 0, -3);
			$mt = str_replace(",", "", $str);
			$mt = str_replace(" ", "", $mt);
		}else{ 				
			$mt = str_replace(" ", "", $string);
		}
	}		
	
	return $mt;
}

function get_id_region_ontm02($libelle) {
	
	if (mb_detect_encoding($libelle, 'UTF-8', true) === false ){
		$str = utf8_encode(trim(strtolower($libelle)));
	}else {
		$str = trim(strtolower($libelle));
	}
	
	
	$id_region =0;
	$sql = "SELECT id_region FROM siit_region  
			WHERE lower(li_region) = '".$str."'"; 
		
	$results = db_query($sql);
	foreach($results as $result) {
		$id_region = $result->id_region;
	}	
		
	if (empty($id_region)) {
		$sql = "SELECT id_region FROM {siit_region_entite} p WHERE 
				 lower(li_region) ='".$str."'"; 
		$results = db_query($sql);
		foreach($results as $result) {
			$id_region = $result->id_region;
		}
	}	   
		
	return $id_region;	
}


	/*
	0 Etablissement
	1 CAT
	2 NBRE CH;
	3 Taux VT;
	4 Mois;
	5 Montant (50%);
	6 Taux d'occupation	
*/

function cas_fichier_2($line, &$valid, $row){
	
	$data = array();

	$id_etablissement=0;
	$id_classement_etablissement=0;
    
   
    $id_mois_min=0; 
    $id_mois_max=0; 
    $annee_min=0;
    $annee_max=0;
	$annee_min_actif =false;
	$is_montant_set=false;
	$annee_tmp=0;	
	$max_au = false;
	$max_et= false;
	
	if(isset($line[0]) && (strpos($line[0], 'Moyenne') !== false )) {
		return false;	
	}

	
	if(isset($line[4]) && $line[4]=="TOTAL") {
		return false;	
	}
	
	if(isset($line[4]) && $line[4]!== "" ){
	
		//Les différents cas sont :
		//Mai 2016
		//Novembre 2015 A Mai 2016
		//Novembre A Mai 2016
		//Mars A Mai 2016
		//Mars 2015 A Mai 2016
		//AVRIL ET Mai 2016
		//Novembre 2015 AU Mai 2016
		//Novembre AU Mai 2016
		//Mars AU Mai 2016
		//Mars 2015 AU Mai 2016
		$str = str_replace("  ", " ", $line[4]);
		$str = str_replace(" AU ", "/", $str);
		$str = str_replace(" ET ", "/", $str);
		$str = str_replace(" A ", "/", $str);
		$str = explode("/",$str); //==> On a mois min et mois max
		$annee_min = 0;
		$annee_max = 0;
		if (isset($str[0])) {
			$dateMin = explode(" ",$str[0]);
			$id_mois_min = $dateMin[0];
			$id_mois_min = get_id_mois($id_mois_min);
			if (isset($dateMin[1])) {
				$annee_min = $dateMin[1];
			}
		}
		
		$intervalle = true;
		if (isset($str[1])) {
			$dateMax = explode(" ",$str[1]);
			$id_mois_max = $dateMax[0];
			$id_mois_max = get_id_mois($id_mois_max);
			if (isset($dateMax[1])) {
				$annee_max = $dateMax[1];
			}
		} else {
			$intervalle = false; //Juste un mois sans intervalle de période
			$id_mois_max = $id_mois_min;
			$annee_max = $annee_min;
		}
		
		
		if ($id_mois_min < $id_mois_max) {
			if (empty($annee_min) && !empty($annee_max)) {
				$annee_min = $annee_max;
			}
		}
		
		if ($intervalle && empty($id_mois_max)) {
			drupal_set_message(t("La colonne 'Mois' contient une erreur : vérifier le mois de fin '$line[4]' de l'intervalle. (".real_line($row).")"), $type = 'error', $repeat = true);											
			$valid = false;
		}
		
		if ($intervalle && empty($annee_max)) {
			drupal_set_message(t("La colonne 'Mois' contient une erreur : vérifier l'année de fin '$line[4]' de l'intervalle. (".real_line($row).")"), $type = 'error', $repeat = true);											
			$valid = false;
		}
		
		if (empty($id_mois_min)) {
			drupal_set_message(t("La colonne 'Mois' contient une erreur : vérifier le mois du début '$line[4]' de l'intervalle. (".real_line($row).")"), $type = 'error', $repeat = true);
			$valid = false;
		}
		
		
		if ($intervalle && $id_mois_min > $id_mois_max) {
			if (empty($annee_min)) {
				drupal_set_message(t("La colonne 'Mois' contient une erreur : vérifier l'année du début '$line[4]' de l'intervalle. (".real_line($row).")"), $type = 'error', $repeat = true);
				$valid = false;
			}
		}
		
		if($intervalle && !is_numeric($annee_max)){
			drupal_set_message(t("La colonne 'Mois' contient une erreur : vérifier l'année de fin '$line[4]' de l'intervalle. (".real_line($row).")"), $type = 'error', $repeat = true);
			$valid = false;
		}
		if(!is_numeric($annee_min)){
			drupal_set_message(t("La colonne 'Mois' contient une erreur : vérifier l'année de début '$line[4]' de l'intervalle. (".real_line($row).")"), $type = 'error', $repeat = true);
			$valid = false;
		}
		
		if ($intervalle && $annee_max < $annee_min ){
			drupal_set_message(t("Intervalle de date incoherente avec la période : '$line[4]'. (".real_line($row).")"), $type = 'error', $repeat = true);									
			$valid = false;
		}
		
		   
		// Montant final : cas 87 000,00  | "33,000.00"
		if($line[5]!== ""){
			$montant = manage_montant($line[5]);

			if($montant === "0" || empty($line[5])){
				$montant = 0;	
			}
			
			if(!is_numeric($montant)){
				drupal_set_message(t("Le montant '$montant' du fichier n'est pas un nombre. (".real_line($row).")"), $type = 'error', $repeat = true);
				$valid = false;
			}		
			
			if ($montant < 0){
				drupal_set_message(t("Le montant calculé ".$nb_mois." n'est pas cohérent : '$line[5]'. (".real_line($row).")"), $type = 'error', $repeat = true);									
				$valid = false;
			}
			
			$is_montant_set = true;
		}
	
				
			
	}
	


	$li_etablissement = "";
	$province = "";
	$district = "";
	$id_region  = 0;
    //On teste toutes les lignes par la periode concerné seulement


    //REGION
    $cell_region = $line[0];

    if(empty($cell_region) && !empty($line[4])){
        drupal_set_message(t("Le champs région est vide. (".real_line($row).")"), $type = 'error', $repeat = true);
        $valid = false;
    } else {

        // Cas 9- FIANARANTSOA:Ranohira-Isalo:xx
        if(strpos(trim(strtolower($cell_region)), trim(strtolower('Ranohira-Isalo'))) !== false ){

            $str_final = "FIANARANTSOA:Ranohira-Isalo";
            $id_region = get_id_region_ontm02($str_final);
            if($id_region==0){
                drupal_set_message(t("La région '$str_final' n'existe pas en base. (".real_line($row).")"), $type = 'error', $repeat = true);
                $valid = false;
            }
            // 31 = longueur 9-FIANARANTSOA:Ranohira-Isalo:
            $len =  strlen($cell_region)-31;
            $li_etablissement = substr($cell_region,31,$len);

        }else {

            if(strpos($cell_region, ':') !== false){

            }else {
                drupal_set_message(t("Erreur sur le format de la région '$cell_region'. (".real_line($row).")"), $type = 'error', $repeat = true);
                $valid = false;
            }

            $str_region = explode("-", $cell_region);

            $k=0;
            //$region_1 = $str_region[0];
            foreach($str_region as $str1){


                if($k==1){
                    $str_reg_1 = explode(":", $str1);

                    $j=0;
                    foreach($str_reg_1 as $str2){

                        if($j == 0){
                            $province = $str2;
                        }else if($j == 1){
                            $district = $str2;
                        }else if($j == 2){
                            $li_etablissement = $str2;
                        }
                        $j++;

                    }



                    if($li_etablissement == "" && $province !== "" && $district !== ""){
                        //Cas  5- TOLAGNARO:ROVA HOTEL
                        $str_region = $province;
                        $str_final = str_replace("'","''",$str_region);
                        $id_region = get_id_region_ontm02($str_final);
                        if($id_region==0){
                            drupal_set_message(t("La région '$str_final' n'existe pas en base. (".real_line($row).")"), $type = 'error', $repeat = true);
                            $valid = false;
                        }

                        $li_etablissement = $district;

                    }else{
                        // Cas 9- FIANARANTSOA:Manakara:LA VANILLE
                        $str_region = $province.":".$district;
                        $str_final = str_replace("'","''",$str_region);
                        //drupal_set_message(t("region : $str_final"), $type = '', $repeat = true);
                        $id_region = get_id_region_ontm02($str_final);
                        if($id_region==0){
                            drupal_set_message( t("La région '$str_final' n'existe pas en base. (".real_line($row).")"), $type = 'error', $repeat = true);
                            $valid = false;
                        }
                    }
                }
               $k++;
            }
        }
    }

		

	//Classement de l'hotel
	if(isset($line[1])){
		$classement = $line[1];
		$id_classement_etablissement = get_id_classement_etablissement($classement);
	}
		
	//MONTANT 
	//cas 87 000,00  | "33,000.00"
	if(isset($line[5]) && !$is_montant_set){
		$string = $line[5];
		$montant = manage_montant($string);	
			
		if($montant === "0" || empty($line[5])){														
			$montant = 0;	
		}
			
		if(!is_numeric($montant)){
			drupal_set_message(t("Le montant '$montant' du fichier n'est pas un nombre. (".real_line($row).")"), $type = 'error', $repeat = true);
			$valid = false;
		}						
	}	
		
						
		
	//NB_CH 										
	$nb_chambre=0;
	if(isset($line[2])){
		if(!is_numeric($line[2]) && $line[2] !== "" ){
			drupal_set_message(t("Le nombre de chambre '$line[2]' du fichier n'est pas un nombre. (".real_line($row).")"), $type = 'error', $repeat = true);
			$valid = false;
		}else {
			$nb_chambre = $line[2]!==""?$line[2]:0;
		}
	}
	
	if ($valid) {
		
					
		$str_dt_saisie =  $_POST['annee'].'-'.$_POST['mois'].'-01';
		$date_saisie = new Datetime($str_dt_saisie);
		$date_saisie = $date_saisie->format("Y-m-d");
		
		$id_mois_min_str = $id_mois_min<10 ? '0'.$id_mois_min:$id_mois_min;
		if ($intervalle) {
			$id_mois_max_str = $id_mois_max<10 ? '0'.$id_mois_max:$id_mois_max;
		} else {
			$id_mois_max_str = $id_mois_min_str;
		}
		
		$str_dt_debut = $annee_min.'-'.$id_mois_min_str.'-01';
		$str_dt_fin = $annee_max.'-'.$id_mois_max_str.'-01'; 
		
							
		$list_date = getinterval($str_dt_debut,$str_dt_fin);
			
			
		
		if (in_array($date_saisie, $list_date)) {	
			
			if ($intervalle) {
				$nb_mois = ($annee_max - $annee_min) * 12 + $id_mois_max - $id_mois_min + 1;							
				//$nb_mois = $id_mois_max - $id_mois_min + 1;
			} else {
				$nb_mois = 1;
			}
			
			//On calcule le montant du mois concerné
			$montant = intval($montant/$nb_mois);
			$id_mois_tmp = $_POST['mois'];										
			$annee_tmp = $_POST['annee'];				
			
		}
	}

	
	if($annee_tmp == $_POST['annee'] && $id_mois_tmp == $_POST['mois']){	
	
		if($montant!==0 && $id_region !==0 && $id_mois_tmp!==0 && $annee_tmp!==0 && $nb_chambre!==0){
			$data[] = array(
				'id_region' =>  $id_region,
				'nb_chambres' => $nb_chambre,
				'li_etablissement' => $li_etablissement,
				'id_etablissement' => $id_etablissement,
				'id_mois' => $id_mois_tmp,
				'id_classement_etablissement' => $id_classement_etablissement,
				'annee' => $annee_tmp,
				'montant' => $montant,						
			);
		}
	}
	//reset
	$li_etablissement  ="";
	$province = "";
	$district = "";
	$annee_tmp = 0;
	$id_mois_tmp = 0;

	return $data;
	
}
